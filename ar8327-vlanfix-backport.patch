diff --git a/target/linux/generic/files/drivers/net/phy/ar8216.c b/target/linux/generic/files/drivers/net/phy/ar8216.c
index 9cbe3a8..91bfd35 100644
--- a/target/linux/generic/files/drivers/net/phy/ar8216.c
+++ b/target/linux/generic/files/drivers/net/phy/ar8216.c
@@ -71,7 +71,7 @@ struct ar8xxx_chip {
 	u32 (*read_port_status)(struct ar8216_priv *priv, int port);
 	int (*atu_flush)(struct ar8216_priv *priv);
 	void (*vtu_flush)(struct ar8216_priv *priv);
-	void (*vtu_load_vlan)(struct ar8216_priv *priv, u32 vid, u32 port_mask);
+	void (*vtu_load_vlan)(struct ar8216_priv *priv, u32 vlan);
 
 	const struct ar8xxx_mib_desc *mib_decs;
 	unsigned num_mibs;
@@ -104,7 +104,8 @@ struct ar8216_priv {
 	bool vlan;
 	u16 vlan_id[AR8X16_MAX_VLANS];
 	u8 vlan_table[AR8X16_MAX_VLANS];
-	u8 vlan_tagged;
+	u8 vlan_tagged_8216;
+	u8 vlan_tagged_8327[AR8X16_MAX_VLANS];
 	u16 pvid[AR8X16_MAX_PORTS];
 };
 
@@ -539,7 +540,7 @@ ar8216_mangle_rx(struct net_device *dev, struct sk_buff *skb)
 	port = buf[0] & 0xf;
 
 	/* no need to fix up packets coming from a tagged source */
-	if (priv->vlan_tagged & (1 << port))
+	if (priv->vlan_tagged_8216 & (1 << port))
 		return;
 
 	/* lookup port vid from local table, the switch passes an invalid vlan id */
@@ -593,10 +594,13 @@ ar8216_vtu_flush(struct ar8216_priv *priv)
 }
 
 static void
-ar8216_vtu_load_vlan(struct ar8216_priv *priv, u32 vid, u32 port_mask)
+ar8216_vtu_load_vlan(struct ar8216_priv *priv, u32 vlan)
 {
 	u32 op;
 
+	u32 vid = priv->vlan_id[vlan];
+	u32 port_mask = priv->vlan_table[vlan];
+
 	op = AR8216_VTU_OP_LOAD | (vid << AR8216_VTU_VID_S);
 	ar8216_vtu_op(priv, op, port_mask);
 }
@@ -1175,11 +1179,14 @@ ar8327_vtu_flush(struct ar8216_priv *priv)
 }
 
 static void
-ar8327_vtu_load_vlan(struct ar8216_priv *priv, u32 vid, u32 port_mask)
+ar8327_vtu_load_vlan(struct ar8216_priv *priv, u32 vlan)
 {
 	u32 op;
 	u32 val;
 	int i;
+	u32 vid = priv->vlan_id[vlan];
+	u32 port_mask = priv->vlan_table[vlan];
+	u32 tagged = priv->vlan_tagged_8327[vlan];
 
 	op = AR8327_VTU_FUNC1_OP_LOAD | (vid << AR8327_VTU_FUNC1_VID_S);
 	val = AR8327_VTU_FUNC0_VALID | AR8327_VTU_FUNC0_IVL;
@@ -1190,7 +1197,7 @@ ar8327_vtu_load_vlan(struct ar8216_priv *priv, u32 vid, u32 port_mask)
 			mode = AR8327_VTU_FUNC0_EG_MODE_NOT;
 		else if (priv->vlan == 0)
 			mode = AR8327_VTU_FUNC0_EG_MODE_KEEP;
-		else if (priv->vlan_tagged & BIT(i))
+		else if (tagged& BIT(i))
 			mode = AR8327_VTU_FUNC0_EG_MODE_TAG;
 		else
 			mode = AR8327_VTU_FUNC0_EG_MODE_UNTAG;
@@ -1204,13 +1211,23 @@ static void
 ar8327_setup_port(struct ar8216_priv *priv, int port, u32 egress, u32 ingress,
 		  u32 members, u32 pvid)
 {
-	u32 t;
-	u32 mode;
+	u32 mode, t;
+
+	if (priv->vlan) {
+		pvid = priv->vlan_id[priv->pvid[port]];
+		mode = AR8327_PORT_VLAN1_OUT_MODE_UNMOD;
+		ingress = AR8216_IN_SECURE;
+	} else {
+		pvid = port;
+		mode = AR8327_PORT_VLAN1_OUT_MODE_UNTOUCH;
+		ingress = AR8216_IN_PORT_ONLY;
+	}
 
 	t = pvid << AR8327_PORT_VLAN0_DEF_SVID_S;
 	t |= pvid << AR8327_PORT_VLAN0_DEF_CVID_S;
 	priv->write(priv, AR8327_REG_PORT_VLAN0(port), t);
 
+	/*
 	mode = AR8327_PORT_VLAN1_OUT_MODE_UNMOD;
 	switch (egress) {
 	case AR8216_OUT_KEEP:
@@ -1222,7 +1239,7 @@ ar8327_setup_port(struct ar8216_priv *priv, int port, u32 egress, u32 ingress,
 	case AR8216_OUT_ADD_VLAN:
 		mode = AR8327_PORT_VLAN1_OUT_MODE_TAG;
 		break;
-	}
+	}*/
 
 	t = AR8327_PORT_VLAN1_PORT_VLAN_PROP;
 	t |= mode << AR8327_PORT_VLAN1_OUT_MODE_S;
@@ -1320,22 +1337,24 @@ ar8216_sw_get_port_link(struct switch_dev *dev, int port,
 }
 
 static int
-ar8216_sw_get_ports(struct switch_dev *dev, struct switch_val *val)
+ar8xxx_sw_get_ports(struct switch_val *val, int ports, u8 port_mask, u8 tagged)
 {
-	struct ar8216_priv *priv = to_ar8216(dev);
-	u8 ports = priv->vlan_table[val->port_vlan];
+//	struct ar8216_priv *priv = to_ar8216(dev);
+//	u8 ports = priv->vlan_table[val->port_vlan];
 	int i;
 
 	val->len = 0;
-	for (i = 0; i < dev->ports; i++) {
+//	for (i = 0; i < dev->ports; i++) {
+	for (i = 0; i < ports; i++) {
 		struct switch_port *p;
 
-		if (!(ports & (1 << i)))
+		if (!(port_mask & (1 << i)))
 			continue;
 
 		p = &val->value.ports[val->len++];
 		p->id = i;
-		if (priv->vlan_tagged & (1 << i))
+		//if (priv->vlan_tagged & (1 << i))
+		if (tagged & BIT(i))
 			p->flags = (1 << SWITCH_PORT_FLAG_TAGGED);
 		else
 			p->flags = 0;
@@ -1348,16 +1367,32 @@ ar8216_sw_set_ports(struct switch_dev *dev, struct switch_val *val)
 {
 	struct ar8216_priv *priv = to_ar8216(dev);
 	u8 *vt = &priv->vlan_table[val->port_vlan];
+	u8 *tagged = &priv->vlan_tagged_8216;
 	int i, j;
 
 	*vt = 0;
 	for (i = 0; i < val->len; i++) {
 		struct switch_port *p = &val->value.ports[i];
 
-		if (p->flags & (1 << SWITCH_PORT_FLAG_TAGGED)) {
-			priv->vlan_tagged |= (1 << p->id);
+	//	if (p->flags & (1 << SWITCH_PORT_FLAG_TAGGED)) {
+	//		priv->vlan_tagged |= (1 << p->id);
+		if (p->flags & BIT(SWITCH_PORT_FLAG_TAGGED)) {
+
+			/* if port was untagged before then
+			 * remove him from other vlans */
+			if(*tagged & BIT(p->id)){
+				for (j = 0; j < AR8X16_MAX_VLANS; j++) {
+					if (j == val->port_vlan)
+						continue;
+
+					priv->vlan_table[j] &= ~(BIT(p->id));
+				}
+			}
+
+			*tagged |= BIT(p->id);
 		} else {
-			priv->vlan_tagged &= ~(1 << p->id);
+			//priv->vlan_tagged &= ~(1 << p->id);
+			*tagged &= ~(BIT(p->id));
 			priv->pvid[p->id] = val->port_vlan;
 
 			/* make sure that an untagged port does not
@@ -1373,6 +1408,51 @@ ar8216_sw_set_ports(struct switch_dev *dev, struct switch_val *val)
 	}
 	return 0;
 }
+	static int
+ar8327_sw_set_ports(struct switch_dev *dev, struct switch_val *val)
+{
+	struct ar8216_priv *priv = to_ar8216(dev);
+	u8 *vt = &priv->vlan_table[val->port_vlan];
+	u8 *vlan_tagged = priv->vlan_tagged_8327;
+	u8 *tagged = &vlan_tagged[val->port_vlan];
+
+	int i;
+
+	*vt = 0;
+	*tagged = 0;
+	for (i = 0; i < val->len; i++) {
+		struct switch_port *p = &val->value.ports[i];
+
+		if (p->flags & BIT(SWITCH_PORT_FLAG_TAGGED)) {
+			*tagged |= BIT(p->id);
+		} else {
+			priv->pvid[p->id] = val->port_vlan;
+		}
+
+		*vt |= BIT(p->id);
+	}
+	return 0;
+}
+static int
+ar8216_sw_get_ports(struct switch_dev *dev, struct switch_val *val)
+{
+	int ports = dev->ports;
+	struct ar8216_priv *priv = to_ar8216(dev);
+	u8 port_mask = priv->vlan_table[val->port_vlan];
+	u8 tagged = priv->vlan_tagged_8216;
+
+	return ar8xxx_sw_get_ports(val, ports, port_mask, tagged);
+}
+static int
+ar8327_sw_get_ports(struct switch_dev *dev, struct switch_val *val)
+{
+	int ports = dev->ports;
+	struct ar8216_priv *priv = to_ar8216(dev);
+	u8 port_mask = priv->vlan_table[val->port_vlan];
+	u8 tagged = priv->vlan_tagged_8327[val->port_vlan];
+
+	return ar8xxx_sw_get_ports(val, ports, port_mask, tagged);
+}
 
 static int
 ar8216_sw_hw_apply(struct switch_dev *dev)
@@ -1401,8 +1481,10 @@ ar8216_sw_hw_apply(struct switch_dev *dev)
 					portmask[i] |= vp & ~mask;
 			}
 
-			priv->chip->vtu_load_vlan(priv, priv->vlan_id[j],
-						 priv->vlan_table[j]);
+//			priv->chip->vtu_load_vlan(priv, priv->vlan_id[j],
+//						 priv->vlan_table[j]);
+			priv->chip->vtu_load_vlan(priv, j);
+
 		}
 	} else {
 		/* vlan disabled:
@@ -1423,7 +1505,7 @@ ar8216_sw_hw_apply(struct switch_dev *dev)
 
 		if (priv->vlan) {
 			pvid = priv->vlan_id[priv->pvid[i]];
-			if (priv->vlan_tagged & (1 << i))
+			if (priv->vlan_tagged_8216 & (1 << i))
 				egress = AR8216_OUT_ADD_VLAN;
 			else
 				egress = AR8216_OUT_STRIP_VLAN;
@@ -1636,6 +1718,27 @@ static const struct switch_dev_ops ar8216_sw_ops = {
 	.reset_switch = ar8216_sw_reset_switch,
 	.get_port_link = ar8216_sw_get_port_link,
 };
+static const struct switch_dev_ops ar8327_sw_ops = {
+	.attr_global = {
+		.attr = ar8216_globals,
+		.n_attr = ARRAY_SIZE(ar8216_globals),
+	},
+	.attr_port = {
+		.attr = ar8216_port,
+		.n_attr = ARRAY_SIZE(ar8216_port),
+	},
+	.attr_vlan = {
+		.attr = ar8216_vlan,
+		.n_attr = ARRAY_SIZE(ar8216_vlan),
+	},
+	.get_port_pvid = ar8216_sw_get_pvid,
+	.set_port_pvid = ar8216_sw_set_pvid,
+	.get_vlan_ports = ar8327_sw_get_ports,
+	.set_vlan_ports = ar8327_sw_set_ports,
+	.apply_config = ar8216_sw_hw_apply,
+	.reset_switch = ar8216_sw_reset_switch,
+	.get_port_link = ar8216_sw_get_port_link,
+};
 
 static int
 ar8216_id_chip(struct ar8216_priv *priv)
@@ -1830,7 +1933,10 @@ ar8216_config_init(struct phy_device *pdev)
 
 	swdev = &priv->dev;
 	swdev->cpu_port = AR8216_PORT_CPU;
-	swdev->ops = &ar8216_sw_ops;
+	if(chip_is_ar8327(priv))
+		swdev->ops = &ar8327_sw_ops;
+	else
+		swdev->ops = &ar8216_sw_ops;
 	swdev->ports = AR8216_NUM_PORTS;
 
 	if (chip_is_ar8316(priv)) {
